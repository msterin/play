#!/usr/bin/env python
# Copyright 2016 VMWare, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
VCS is  command line interface for VSphere Container Service

Derived from vmdkops_admin.py

'''

# Notes to developer -  how to change code:
# 1. modify commands() table to parse desired syntax (function help tells  you how)
# 2. implement or update functions mentioned in the commands() table to carry the actions
#
# Note that the current code already represents
# VCS cluster command line control, but implementation is stubbed
#

# Note: We assume 'requests' module is preinstalled (generally true).
# If not, 'pip install requests' is a prerequisite. 
# As an alternative, we can use python3 with urllib.request.
import requests
import six
import os
import os.path
import sys
import argparse
import json



def commands():
    """
    This function returns a dictionary representation of a CLI specification that is used to
    generate a CLI parser. The dictionary is recursively walked in the `add_subparser()` function
    and appropriate calls are made to the `argparse` module to create a CLI parser that fits the
    specification.

    Each key in the top level of the dictionary is a command string. Each command may contain the
    following keys:

    * func - The callback function to be called when the command is issued. This key is always
             present unless there are subcommands, denoted by a 'cmds' key.

    * help - The help string that is printed when the `-h` or `--help` paramters are given without
             reference to a given command. (i.e. `vcs-admin -h`). All top level help
             strings are printed in this instance.

    * args - A dictionary of any positional or optional arguments allowed for the given command. The
             args dictionary may contain the following keys:

             * help - The help for a given option which is displayed when the `-h` flag is given
                      with mention to a given command. (i.e. `vcs-admin ls -h`). Help for
                      all options are shown for the command.

             * action - The action to take when the option is given. This is directly passed to
                        argparse. Note that `store_true` just means pass the option to the callback
                        as a boolean `True` value and don't require option parameters.
                        Other options for the action value can be found in the argparse documentation.
                        https://docs.python.org/3/library/argparse.html#action

             * metavar - A way to refer to each expected argument in help documentation. This is
                         directly passed to argparse.
                         See https://docs.python.org/3/library/argparse.html#metavar

             * required - Whether or not the argument is required. This is directly passed to
                          argparse.

             * type - A type conversion function that takes the option parameter and converts it
                      to a given type before passing it to the func callback. It prints an error and
                      exits if the given argument cannot be converted.
                      See https://docs.python.org/3/library/argparse.html#type

             * choices - A list of choices that can be provided for the given option. This list is
                         not directly passed to argparse. Instead a type conversion function is
                         created that only allows one or more of the choices as a comma separated
                         list to be supplied. An error identical to the one presented when using the
                         'choices' option in argparse is printed if an invalid choice is given. The
                         rationale for not directly using the argparse choices option is that
                         argparse requires space separated arguments of the form: `-l a b c`, rather
                         than the defacto single argument, comma separated form: `-l a,b,c`, common
                         to most unix programs.

    * cmds - A dictionary of subcommands where the key is the next word in the command line string.
             For example, in `vcs-admin tenant create`, `tenant` is the command, and `create` is
             the subcommand. Subcommands can have further subcommands, but currently there is only
             one level of subcommands in this specification. Each subcommand can contain the same
             attributes as top level commands: (func, help, args, cmds). These attributes have
             identical usage to the top-level keys, except they only apply when the subcommand is
             part of the command.

             Note that the last subcommand in a chain is the one where the callback function is
             defined. For example, if `tenant create` has a callback, but if a user runs the program
             like: `.vcs-admin tenant` they will get the following error:
             ```
             usage: vcs-admin cluster [-h] {rm,create,ls,modify} ...
             vcs-admin cluster: error: too few arguments
             ```
    """
    return {
        #
        # cluster {create, update, rm , ls} - manipulates clusters
        #
        'cluster': {
            'help': 'Manages cluster - creates, removed, modifies',
            'cmds': {
                'create': {
                    'func': cluster_create,
                    'help': 'Create a new cluster',
                    'args': {
                        '--name': {
                            'help': 'Name of the cluster',
                            'required': True
                        },
                        '--type': {
                            # this one is not requires as we will use KUBERNETES by default
                            'help': 'Type of the cluster',
                            'choices': ['KUBERNETES', 'MESOS', 'SWARM']
                        },
                        '--slaves': {
                            'help': "How many slave (minion) nodes to create. Default 1",
                            'metavar': 'COUNT',
                            'default': 1,
                            'type': int

                        },
                        '--etcd_ips': {
                            'help': 'Static IP to use for `etcd` nodes. '
                                    'For multiple nodes, use comma-separated list',
                            'metavar': 'NETWORK',
                            'required': True
                        },
                        '--master_ip': {
                            'help': 'Static IP to use for `kube master.',
                            'metavar': 'NETWORK',
                            'required': True
                        },
                        '--container_network': {
                            'help': 'Inter-container network mask, e.g. 10.20.0.1/20',
                            'metavar': 'NETWORK/MASK',
                            'required': True
                        }
                    }
                },
                'scale': {
                    'func': cluster_scale,
                    'help': 'Scale an existing cluster',
                    'args': {
                        '--name': {
                            'help': 'The name of the cluster',
                            'required': True
                        },
                        '--slaves': {
                            'help': "How many slave (minion) nodes to scale to.",
                            'metavar': 'COUNT',
                            'default': 1,
                            'type': int
                        }
                    }
                },
                'rm': {
                    'func': cluster_rm,
                    'help': 'Delete a cluster',
                    'args': {
                        '--name': {
                            'help': 'The name of the cluster to be removed',
                            'required': True
                      }
                    }
                },
                'ls': {
                    'func': cluster_ls,
                    'help': 'List clusters managed by VCS'
                }
            }
        },
        'status': {
            'func': vcs_status,
            'help': 'Show the status of the VCS service'
        }
    }


def create_parser():
    """ Create a CLI parser via argparse based on the dictionary returned from commands() """
    parser = argparse.ArgumentParser(description='Manage VCS clusters')
    add_subparser(parser, commands())
    return parser


def add_subparser(parser, cmds_dict):
    """ Recursively add subcommand parsers based on a dictionary of commands """
    subparsers = parser.add_subparsers()
    for cmd, attributes in cmds_dict.items():
        subparser = subparsers.add_parser(cmd, help=attributes['help'])
        if 'func' in attributes:
            subparser.set_defaults(func=attributes['func'])
        if 'args' in attributes:
            for arg, opts in attributes['args'].items():
                opts = build_argparse_opts(opts)
                subparser.add_argument(arg, **opts)
        if 'cmds' in attributes:
            add_subparser(subparser, attributes['cmds'])


def build_argparse_opts(opts):
    if 'choices' in opts:
        opts['type'] = make_list_of_values(opts['choices'])
        help_opts = opts['help']
        opts['help'] = '{0}: Choices = {1}'.format(help_opts, opts['choices'])
        del opts['choices']
    return opts


def parse_args():
    parser = create_parser()
    args = parser.parse_args()
    if args != argparse.Namespace():
       return args
    else:
       parser.print_help()


def comma_seperated_string(string):
    return string.split(',')

def make_list_of_values(allowed):
    """
    Take a list of allowed values for an option and return a function that can be
    used to typecheck a string of given values and ensure they match the allowed
    values.  This is required to support options that take comma separated lists
    such as --type in 'cluster create --type=kubernetes,mesos,swarm'
    """

    def list_of_values(string):
        given = string.split(',')
        for g in given:
            if g not in allowed:
                msg = (
                    'invalid choices: {0} (choices must be a comma separated list of '
                    'only the following words \n {1}. '
                    'No spaces are allowed between choices.)').format(g, repr(allowed).replace(' ', ''))
                raise argparse.ArgumentTypeError(msg)
        return given

    return list_of_values

def output(fmt_string, *args):
    """Trivial wraper for printing stuff on the screen"""
    if args:
        six.print_(fmt_string % args)
    else:
        six.print_(fmt_string)

#==============================================================================

# Command line implementations.

# First line to be printed by the command on each invocation  
INFO = "vSphere Container Service admin command line v0.1\n"

# paths to be used in URLs
CLUSTERS_PATH = "/vcs/cloudstore/clusters"

def init():
    six.print_(INFO)
    # Make sure VCS_HOST is set, and exit if it's not
    try:
        global VCS_HOST
        VCS_HOST = os.environ['VCS_HOST']
    except:
        six.print_("Missing VCS_HOST, please set it before running 'vcs' tool. "
                   "Example: 'VCS_HOST=10.20.1.11:2121 vcs cluster ls'")
        sys.exit(1)


def cluster_create(args):
    """Creates a new cluster - creates VMs with needed components and configures the cluster"""
    output("Creating cluster named '%s' (NOT IMPLEMENTED YET)", args.name)
    output(args)


def cluster_ls(args):
    """Lists clusters managed by VCS"""

    # This is just an example of gettin JSON data from REST API
    # Should be replaced with actual VCS calls to VCS_HOST
    output("List all clusters managed by VCS at %s:", VCS_HOST)
    resp = requests.get(VCS_HOST + CLUSTERS_PATH)
    if resp.status_code != 200:
        # This means something went wrong. TBD: useful err. msg
        raise Exception(resp.status_code)
    known_clusters = json.loads(resp.content)['documentLinks']
    for cluster in known_clusters:
        resp = requests.get(VCS_HOST + cluster)
        cluster_info = json.loads(resp.content)
        output("=====\nCluster %s", os.path.basename(cluster_info['documentSelfLink']))
        for k in ('clusterState', 'clusterhealth', 'clusterName', 'slaveCount', 'extendedProperties'):
            output("%s = %s", k, cluster_info[k])

def cluster_rm(args):
    """Removes a cluster managed by VCS. That includes VM deletion"""
    pass

def cluster_scale(args):
    """Re-configures a cluster based on the new config passed in args"""
    output("Scaling cluster '%s' to %d slaves. (NOT IMPLEMENTED YET)", args.name, args.slaves)

def vcs_status(args):
    """Reports overall status of VCS service"""
    resp = requests.get(VCS_HOST)
    if resp.status_code != 200:
        output("No response from %s", VCS_HOST)
    elif CLUSTERS_PATH not in json.loads(resp.content)['documentLinks']:
        output("VCS seems down - it's missing from services list on %s", VCS_HOST)
    else:
        output("VCS is certainly up, and hopefully healthy on %s", VCS_HOST)


if __name__ == '__main__':
    init()
    args = parse_args()
    if args:
        args.func(args)

